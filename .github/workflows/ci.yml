name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build_and_tests:
    name: Build & Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Python dependencies
        if: hashFiles('requirements.txt') != ''
        run: pip install -r requirements.txt

      - name: Run Python tests
        run: |
          python -V
          pytest -q

      # Foundry'yi kur
      - name: Install Foundry (nightly)
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      # forge-std: Ã¶nce forge install dener; olmazsa git clone
      - name: Install forge-std (try forge, fallback to git)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p lib
          rm -rf lib/forge-std
          if ! forge install foundry-rs/forge-std@v1.9.5 --quiet; then
            echo "forge install failed, falling back to git clone..."
            git clone --depth 1 https://github.com/foundry-rs/forge-std lib/forge-std
          fi

  deploy:
    name: Deploy (Foundry)
    runs-on: ubuntu-latest
    needs: build_and_tests
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Foundry (nightly)
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Install forge-std (try forge, fallback to git)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p lib
          rm -rf lib/forge-std
          if ! forge install foundry-rs/forge-std@v1.9.5 --quiet; then
            echo "forge install failed, falling back to git clone..."
            git clone --depth 1 https://github.com/foundry-rs/forge-std lib/forge-std
          fi

      - name: Deploy contract
        working-directory: .
        env:
          ETH_RPC_URL: ${{ secrets.SEPOLIA_RPC_URL }}
          PRIVATE_KEY: ${{ secrets.DEPLOYER_PRIVATE_KEY }}
          ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}

        shell: bash
        run: |
          set -euo pipefail
          forge script solidity/script/Deploy.s.sol:Deploy \
            --rpc-url "$ETH_RPC_URL" \
            --private-key "$PRIVATE_KEY" \
            --broadcast \
            --verify \
            -vvvv
